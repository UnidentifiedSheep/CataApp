// <auto-generated />
using DataBase.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataBase.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240217144319_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.2");

            modelBuilder.Entity("DataBase.Data.Agent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<int>("IsZak")
                        .HasColumnType("INTEGER")
                        .HasColumnName("is_zak");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue(" ")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Id" }, "IX_agents_id")
                        .IsUnique();

                    b.ToTable("agents", (string)null);
                });

            modelBuilder.Entity("DataBase.Data.AgentTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<int>("AgentId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("agent_id");

                    b.Property<double>("Balance")
                        .HasColumnType("REAL")
                        .HasColumnName("balance");

                    b.Property<int>("Currency")
                        .HasColumnType("INTEGER")
                        .HasColumnName("currency");

                    b.Property<string>("TransactionDatatime")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("transaction_datatime");

                    b.Property<int>("TransactionStatus")
                        .HasColumnType("INTEGER")
                        .HasColumnName("transaction_status");

                    b.Property<double>("TransactionSum")
                        .HasColumnType("REAL")
                        .HasColumnName("transaction_sum");

                    b.HasKey("Id");

                    b.HasIndex("AgentId");

                    b.HasIndex("Currency");

                    b.HasIndex(new[] { "Id" }, "IX_agent_transactions_id")
                        .IsUnique();

                    b.ToTable("agent_transactions", (string)null);
                });

            modelBuilder.Entity("DataBase.Data.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("CurrencyName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue(" ")
                        .HasColumnName("currency_name");

                    b.Property<double>("ToUsd")
                        .HasColumnType("REAL")
                        .HasColumnName("to_usd");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Id" }, "IX_currencies_id")
                        .IsUnique();

                    b.ToTable("currencies", (string)null);
                });

            modelBuilder.Entity("DataBase.Data.MainCat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<int>("Count")
                        .HasColumnType("INTEGER")
                        .HasColumnName("count");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue("  ")
                        .HasColumnName("name");

                    b.Property<int>("ProducerId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("producer_id");

                    b.Property<int>("UniId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("uni_id");

                    b.Property<string>("UniValue")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("uni_value");

                    b.HasKey("Id");

                    b.HasIndex("ProducerId");

                    b.HasIndex("UniId");

                    b.HasIndex(new[] { "Id" }, "IX_main_cat_id")
                        .IsUnique();

                    b.ToTable("main_cat", (string)null);
                });

            modelBuilder.Entity("DataBase.Data.MainCatPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<int>("Count")
                        .HasColumnType("INTEGER")
                        .HasColumnName("count");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("currency_id");

                    b.Property<int>("MainCatId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("main_cat_id");

                    b.Property<double>("Price")
                        .HasColumnType("REAL")
                        .HasColumnName("price");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("MainCatId");

                    b.HasIndex(new[] { "Id" }, "IX_main_cat_prices_id")
                        .IsUnique();

                    b.ToTable("main_cat_prices", (string)null);
                });

            modelBuilder.Entity("DataBase.Data.MainName", b =>
                {
                    b.Property<int>("UniId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("uni_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.HasKey("UniId");

                    b.HasIndex(new[] { "UniId" }, "IX_main_name_uni_id")
                        .IsUnique();

                    b.ToTable("main_name", (string)null);
                });

            modelBuilder.Entity("DataBase.Data.ProdMainGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<int>("AgentId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("agent_id");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("currency_id");

                    b.Property<string>("Datetime")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("datetime");

                    b.Property<double>("TotalSum")
                        .HasColumnType("REAL")
                        .HasColumnName("total_sum");

                    b.HasKey("Id");

                    b.HasIndex("AgentId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex(new[] { "Id" }, "IX_prod_main_group_id")
                        .IsUnique();

                    b.ToTable("prod_main_group", (string)null);
                });

            modelBuilder.Entity("DataBase.Data.Prodaja", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<int>("Count")
                        .HasColumnType("INTEGER")
                        .HasColumnName("count");

                    b.Property<int>("MainCatId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("main_cat_id");

                    b.Property<double>("Price")
                        .HasColumnType("REAL")
                        .HasColumnName("price");

                    b.Property<int>("ProdajaId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("prodaja_id");

                    b.HasKey("Id");

                    b.HasIndex("MainCatId");

                    b.HasIndex("ProdajaId");

                    b.HasIndex(new[] { "Id" }, "IX_prodaja_id")
                        .IsUnique();

                    b.ToTable("prodaja", (string)null);
                });

            modelBuilder.Entity("DataBase.Data.Producer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("ProducerName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("producer_name");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Id" }, "IX_producer_id")
                        .IsUnique();

                    b.ToTable("producer", (string)null);
                });

            modelBuilder.Entity("DataBase.Data.ZakMainGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<int>("AgentId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("agent_id");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("currency_id");

                    b.Property<string>("Datetime")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("datetime");

                    b.Property<double>("TotalSum")
                        .HasColumnType("REAL")
                        .HasColumnName("total_sum");

                    b.HasKey("Id");

                    b.HasIndex("AgentId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex(new[] { "Id" }, "IX_zak_main_group_id")
                        .IsUnique();

                    b.ToTable("zak_main_group", (string)null);
                });

            modelBuilder.Entity("DataBase.Data.Zakupka", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<int>("Count")
                        .HasColumnType("INTEGER")
                        .HasColumnName("count");

                    b.Property<int>("MainCatId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("main_cat_id");

                    b.Property<double>("Price")
                        .HasColumnType("REAL")
                        .HasColumnName("price");

                    b.Property<int>("ZakId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("zak_id");

                    b.HasKey("Id");

                    b.HasIndex("MainCatId");

                    b.HasIndex("ZakId");

                    b.HasIndex(new[] { "Id" }, "IX_zakupka_id")
                        .IsUnique();

                    b.ToTable("zakupka", (string)null);
                });

            modelBuilder.Entity("DataBase.Data.AgentTransaction", b =>
                {
                    b.HasOne("DataBase.Data.Agent", "Agent")
                        .WithMany("AgentTransactions")
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataBase.Data.Currency", "CurrencyNavigation")
                        .WithMany("AgentTransactions")
                        .HasForeignKey("Currency")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agent");

                    b.Navigation("CurrencyNavigation");
                });

            modelBuilder.Entity("DataBase.Data.MainCat", b =>
                {
                    b.HasOne("DataBase.Data.Producer", "Producer")
                        .WithMany("MainCats")
                        .HasForeignKey("ProducerId")
                        .IsRequired();

                    b.HasOne("DataBase.Data.MainName", "Uni")
                        .WithMany("MainCats")
                        .HasForeignKey("UniId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Producer");

                    b.Navigation("Uni");
                });

            modelBuilder.Entity("DataBase.Data.MainCatPrice", b =>
                {
                    b.HasOne("DataBase.Data.Currency", "Currency")
                        .WithMany("MainCatPrices")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataBase.Data.MainCat", "MainCat")
                        .WithMany("MainCatPrices")
                        .HasForeignKey("MainCatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("MainCat");
                });

            modelBuilder.Entity("DataBase.Data.ProdMainGroup", b =>
                {
                    b.HasOne("DataBase.Data.Agent", "Agent")
                        .WithMany("ProdMainGroups")
                        .HasForeignKey("AgentId")
                        .IsRequired();

                    b.HasOne("DataBase.Data.Currency", "Currency")
                        .WithMany("ProdMainGroups")
                        .HasForeignKey("CurrencyId")
                        .IsRequired();

                    b.Navigation("Agent");

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("DataBase.Data.Prodaja", b =>
                {
                    b.HasOne("DataBase.Data.MainCat", "MainCat")
                        .WithMany("Prodajas")
                        .HasForeignKey("MainCatId")
                        .IsRequired();

                    b.HasOne("DataBase.Data.ProdMainGroup", "ProdajaNavigation")
                        .WithMany("Prodajas")
                        .HasForeignKey("ProdajaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MainCat");

                    b.Navigation("ProdajaNavigation");
                });

            modelBuilder.Entity("DataBase.Data.ZakMainGroup", b =>
                {
                    b.HasOne("DataBase.Data.Agent", "Agent")
                        .WithMany("ZakMainGroups")
                        .HasForeignKey("AgentId")
                        .IsRequired();

                    b.HasOne("DataBase.Data.Currency", "Currency")
                        .WithMany("ZakMainGroups")
                        .HasForeignKey("CurrencyId")
                        .IsRequired();

                    b.Navigation("Agent");

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("DataBase.Data.Zakupka", b =>
                {
                    b.HasOne("DataBase.Data.MainCat", "MainCat")
                        .WithMany("Zakupkas")
                        .HasForeignKey("MainCatId")
                        .IsRequired();

                    b.HasOne("DataBase.Data.ZakMainGroup", "Zak")
                        .WithMany("Zakupkas")
                        .HasForeignKey("ZakId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MainCat");

                    b.Navigation("Zak");
                });

            modelBuilder.Entity("DataBase.Data.Agent", b =>
                {
                    b.Navigation("AgentTransactions");

                    b.Navigation("ProdMainGroups");

                    b.Navigation("ZakMainGroups");
                });

            modelBuilder.Entity("DataBase.Data.Currency", b =>
                {
                    b.Navigation("AgentTransactions");

                    b.Navigation("MainCatPrices");

                    b.Navigation("ProdMainGroups");

                    b.Navigation("ZakMainGroups");
                });

            modelBuilder.Entity("DataBase.Data.MainCat", b =>
                {
                    b.Navigation("MainCatPrices");

                    b.Navigation("Prodajas");

                    b.Navigation("Zakupkas");
                });

            modelBuilder.Entity("DataBase.Data.MainName", b =>
                {
                    b.Navigation("MainCats");
                });

            modelBuilder.Entity("DataBase.Data.ProdMainGroup", b =>
                {
                    b.Navigation("Prodajas");
                });

            modelBuilder.Entity("DataBase.Data.Producer", b =>
                {
                    b.Navigation("MainCats");
                });

            modelBuilder.Entity("DataBase.Data.ZakMainGroup", b =>
                {
                    b.Navigation("Zakupkas");
                });
#pragma warning restore 612, 618
        }
    }
}
